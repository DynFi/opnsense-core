#!/usr/local/bin/php
<?php

/*
 * Copyright (C) 2020-2023 Deciso B.V.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice,
 *    this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES,
 * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
 * AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
 * AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY,
 * OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

require_once("config.inc");
require_once("system.inc");
require_once("util.inc");
require_once("interfaces.inc");
require_once("plugins.inc");

$preserve_logs = !empty($config['syslog']['preservelogs']) ? $config['syslog']['preservelogs'] : 31;
$maxfilesize = !empty($config['syslog']['maxfilesize']) ? $config['syslog']['maxfilesize'] : null;

// gather all syslog created local logs (filename starts with directory name_[8 digits].log)
$relevant_logs = [];
$it = new RecursiveDirectoryIterator("/var/log");
foreach(new RecursiveIteratorIterator($it) as $file) {
    if ($file->isFile()) {
        $log_subject = basename($file->getPath());
        if (strpos($file->getFilename(), $log_subject . "_") === 0
              && $file->getExtension() == "log"
              && ctype_digit(substr($file->getFilename(), strlen($log_subject)+1, 8))) {
            if (!isset($relevant_logs[$log_subject])) {
                $relevant_logs[$log_subject] = [];
            }
            $relevant_logs[$log_subject][] = (string)$file;
        }
    }
}

// remove expired logs and set latest.log symlink
$rotate = false;
foreach ($relevant_logs as $log_subject => $items)  {
    rsort($items);
    /**
     * Force a manual rotate when maxfilesize is specified and the newest file exceeds the specified limit.
     */
    if (!empty($maxfilesize) && (filesize($items[0]) / 1024 / 1024) > $maxfilesize) {
        if (isset($items[1]) && preg_match('/.*_(\d){8}\.log$/', $items[0])) {
            /* Extract rotate sequence number from filename in format XXX_YYYYMMDD.log or XXX_YYYYMMDD.SEQ.log */
            $fparts = explode('_', $items[1]);
            $parts = explode('.', $fparts[1]);
            $seq = (count($parts) == 3 && ctype_digit($parts[1]) ? (int)$parts[1] : 0)  + 1;
            /* Suffix sequence number to last filename, rename and schedule a rotate (syslog-ng reload) */
            $new_filename = sprintf('%s.%04d.log', explode('.', $items[0])[0], $seq);
            array_unshift($items, array_shift($items), $new_filename);
            rename($items[0], $new_filename);
            $rotate = true;
        }
    }
    if (count($items) > $preserve_logs) {
        foreach (array_slice($items, $preserve_logs) as $filename) {
            @unlink($filename);
        }
    }
    // latest is always top of rsorted list $items[0]
    $current_target = @readlink($link);
    if ($current_target != $items[0]) {
        $link = "/var/log/{$log_subject}/latest.log";
        @unlink($link);
        @symlink($items[0], $link);
    }
}

if ($rotate) {
    system_syslog_start();
}
